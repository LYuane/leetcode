//ÁªôÂÆö‰∏Ä‰∏™ÊéíÂ∫èÈìæË°®ÔºåÂà†Èô§ÊâÄÊúâÂê´ÊúâÈáçÂ§çÊï∞Â≠óÁöÑËäÇÁÇπÔºåÂè™‰øùÁïôÂéüÂßãÈìæË°®‰∏≠ Ê≤°ÊúâÈáçÂ§çÂá∫Áé∞ ÁöÑÊï∞Â≠ó„ÄÇ 
//
// Á§∫‰æã 1: 
//
// ËæìÂÖ•: 1->2->3->3->4->4->5
//ËæìÂá∫: 1->2->5
// 
//
// Á§∫‰æã 2: 
//
// ËæìÂÖ•: 1->1->1->2->3
//ËæìÂá∫: 2->3 
// Related Topics ÈìæË°® 
// üëç 384 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }                pre.next = curr;
 *                 temp = curr.val;
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode start = new ListNode();
        start.next = head;

        ListNode pre = start;
        int temp = head.val;
        ListNode curr = head.next;
        while(curr != null){
            if(curr.val == temp){
                while(curr != null && curr.val == temp){
                    curr = curr.next;
                }
                if(curr == null){
                    pre.next = null;
                    break;
                }else{
                    pre.next = curr;
                    temp = curr.val;
                    curr =curr.next;
                }
            }else{
                pre = pre.next;
                temp = curr.val;
                curr = curr.next;
            }

        }
        return start.next;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
